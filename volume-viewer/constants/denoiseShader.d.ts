export function denoiseShaderUniforms(): any;
export const denoiseVertexShaderSrc: "\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n\nout vec2 vUv;\n\nvoid main()\n{\n  vUv = uv;\n  gl_Position = vec4( position, 1.0 );\n}\n";
export const denoiseFragmentShaderSrc: "\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nuniform float gInvExposure;\nuniform int gDenoiseWindowRadius;\nuniform float gDenoiseNoise;\nuniform float gDenoiseInvWindowArea;\nuniform float gDenoiseWeightThreshold;\nuniform float gDenoiseLerpThreshold;\nuniform float gDenoiseLerpC;\nuniform vec2 gDenoisePixelSize;\n\nuniform sampler2D tTexture0;\nin vec2 vUv;\nout vec4 out_FragColor;\n\n// Used to convert from XYZ to linear RGB space\nconst mat3 XYZ_2_RGB = (mat3(\n 3.2404542, -1.5371385, -0.4985314,\n -0.9692660,  1.8760108,  0.0415560,\n  0.0556434, -0.2040259,  1.0572252\n));\n\nvec3 XYZtoRGB(vec3 xyz) {\n  return xyz * XYZ_2_RGB;\n}\n\nvoid main()\n{\n  vec4 pixelColor = texture(tTexture0, vUv);\n  // TODO TONE MAP!!!!!!\n  pixelColor.rgb = XYZtoRGB(pixelColor.rgb);\n\n  pixelColor.rgb = 1.0-exp(-pixelColor.rgb*gInvExposure);\n  pixelColor = clamp(pixelColor, 0.0, 1.0);\n\n  /////////////////////\n  /////////////////////\n  /////////////////////\n  /////////////////////\n  //// DENOISING FILTER\n  /////////////////////\n  // see https://developer.download.nvidia.com/compute/cuda/1.1-Beta/x86_website/projects/imageDenoising/doc/imageDenoising.pdf\n  /////////////////////\n  vec4 clr00 = pixelColor;\n\n  float fCount = 0.0;\n  float SumWeights = 0.0;\n  vec3 clr = vec3(0.0, 0.0, 0.0);\n\n  vec2 uvsample = vUv;\n  vec3 rgbsample;\n  for (int i = -gDenoiseWindowRadius; i <= gDenoiseWindowRadius; i++) {\n    for (int j = -gDenoiseWindowRadius; j <= gDenoiseWindowRadius; j++) {\n\n      // boundary checking?\n      vec3 clrIJ = texture(tTexture0, vUv + vec2(float(i)/gDenoisePixelSize.x, float(j)/gDenoisePixelSize.y)).rgb;\n      //vec3 clrIJ = texelFetch(tTexture0, ivec2(gl_FragCoord.xy) + ivec2(i,j), 0).rgb;\n\n      rgbsample = XYZtoRGB(clrIJ);\n      // tone map!\n      rgbsample = 1.0 - exp(-rgbsample * gInvExposure);\n      rgbsample = clamp(rgbsample, 0.0, 1.0);\n\n      clrIJ = rgbsample;\n\n      float distanceIJ = (clr00.x-clrIJ.x)*(clr00.x-clrIJ.x) + (clr00.y-clrIJ.y)*(clr00.y-clrIJ.y) + (clr00.z-clrIJ.z)*(clr00.z-clrIJ.z);\n\n      // gDenoiseNoise = 1/h^2\n      //\n      float weightIJ = exp(-(distanceIJ * gDenoiseNoise + float(i * i + j * j) * gDenoiseInvWindowArea));\n\n      clr += (clrIJ * weightIJ);\n\n      SumWeights += weightIJ;\n\n      fCount += (weightIJ > gDenoiseWeightThreshold) ? gDenoiseInvWindowArea : 0.0;\n    }\n  }\n\n  SumWeights = 1.0 / SumWeights;\n\n  clr.rgb *= SumWeights;\n\n  float LerpQ = (fCount > gDenoiseLerpThreshold) ? gDenoiseLerpC : 1.0f - gDenoiseLerpC;\n\n  clr.rgb = mix(clr.rgb, clr00.rgb, LerpQ);\n  clr.rgb = clamp(clr.rgb, 0.0, 1.0);\n\n  out_FragColor = vec4(clr.rgb, clr00.a);\n}\n";
